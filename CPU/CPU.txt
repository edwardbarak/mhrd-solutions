Inputs: instr[16], data[16], reset;
Outputs: write, dataAddr[16], instrAddr[16], result[16];
Parts: decoder DECODER, mReg REGISTER16B, aReg REGISTER16B, pc COUNTER16B, 
 alu ALU16B, muxCtLm MUX4W16B, muxArCo MUX16B, muxCoArMrDa MUX4W16B, andJmZe AND;

Wires: 
 instr->decoder.instr,
// 1 cToM & loadM == 1, decoder.constant -> mReg
// 2 loadM == 1 & ctom == 0, alu.out -> mReg
 decoder.cToM->muxCtLm.sel[1], decoder.loadM->muxCtLm.sel[2], //cToM & loadM chk
 decoder.constant->muxCtLm.in4[1:15], alu.out->muxCtLm.in3, //cToM & loadM val
 muxCtLm.out->mReg.in, decoder.loadM->mReg.load,// load output to mReg
// 3 loada == 1, alu.result -> aReg
 alu.out->aReg.in, decoder.loadA->aReg.load,
// 4 decoder.loadD -> write
 decoder.loadD->write,
// 5 decoder.opcode -> alu.opcode
 decoder.opCode->alu.opCode,
// 6 decoder.op1 == 1, decoder.constant -> alu.op1[1:5], else aReg -> alu.op1
 aReg.out->muxArCo.in1, decoder.constant[1:5]->muxArCo.in2[1:5], 
 decoder.op1->muxArCo.sel, muxArCo.out->alu.in1,
// 7 decoder.op2 == 00, decoder.constant -> alu.op2[1:5]
//               == 01, aReg.out         -> alu.op2
//               == 10, mReg.out         -> alu.op2
//               == 11, data             -> alu.op2
 decoder.op2->muxCoArMrDa.sel, decoder.constant[1:5]->muxCoArMrDa.in1[1:5], 
 aReg.out->muxCoArMrDa.in2, mReg.out->muxCoArMrDa.in3, data->muxCoArMrDa.in4,
 muxCoArMrDa.out->alu.in2,
// 8 decoder.jmpifz & alu.zero == 1, mReg.out -> pc.in
 decoder.jmpIfZ->andJmZe.in1, alu.zero->andJmZe.in2, andJmZe.out->pc.load,
 mReg.out->pc.in,  
// 9 alu.out -> result
 alu.out->result,
//10 mReg.out -> dataAddr
 mReg.out->dataAddr,
//11 pc.out -> instrAddr
 pc.out->instrAddr,
//12 reset == 1, 0 -> pc.in
 reset->pc.reset;